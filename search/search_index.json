{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This resource is both an introduction and documentation for the computational aspects of the Zamanian Lab at the University of Wisconsin-Madison. Here you will find a general explanation for how we organize our computational pipelines, as well as steps to take to maintain cross-machine compatibility, reproducibility, and a commitment to open source code. How to Use this Guide Below there will be a short explanation of how we think about all of our internal pipelines. There will be a brief defense of this organization and an explanation for how to use the pipelines, update them, and collaborate with other lab members. The rest of this resource will be a brief and not comprehensive explanation of tools that the Zamanian lab uses. The user will need to do a good amount of background reading and trialing, but this guide will provide the resources needed in order to gain a thorough and working knowledge of all the tools we use. Pipeline Organization We organize our pipelines into 3 tiers, each of which be structued in slightly different ways. Pipelines are categorized into one of the following: Core Pipelines (performed entirely on our BRC server) ImageXpress Mixed Pipelines (performed using a mix of local machines and the server) WormViz Tierpsy Simple Pipelines (performed entirely locally) qPCR EPG Sensory assays Tools There are four pieces of software and four languages we will use to accomplish the above goals (each link will take you to our internal documentation for using these tools and languages): Software GitHub ( https://github.com/ ) Homebrew ( https://brew.sh ) Box Sync ( https://box.com ) conda ( https://docs.conda.io/en/latest/ ) Languages Python R Bash NextFlow Usage This repository is primarily imagined as a first introduction to the Zamanian Lab organization, but it can also be used as a reference for veteran users. New lab members should follow the onboarding guide . Throughout the docs, you will see certain types of code blocks. Code to be run in bash will not include a prompt sequence, for instance: python L3_motility_analysis.py 20180830 Code to be run in Python will include the Python prompt: >>> import numpy as np And code to be run in R will include the R prompt: > install.packages ( 'tidyverse' ) Updating This resource is by nature an open, living, and collaborative document. We are using MkDocs as our site generator which uses a simply structured GitHub repository that includes Markdown files as the documentation and a few ancillary files to help in generation. You will need to have your own GitHub account and will need to be a member of the @zamanianlab organization in order to gain editing privileges. To edit this document, please follow the instructions in the Updating page.","title":"Home"},{"location":"#introduction","text":"This resource is both an introduction and documentation for the computational aspects of the Zamanian Lab at the University of Wisconsin-Madison. Here you will find a general explanation for how we organize our computational pipelines, as well as steps to take to maintain cross-machine compatibility, reproducibility, and a commitment to open source code.","title":"Introduction"},{"location":"#how-to-use-this-guide","text":"Below there will be a short explanation of how we think about all of our internal pipelines. There will be a brief defense of this organization and an explanation for how to use the pipelines, update them, and collaborate with other lab members. The rest of this resource will be a brief and not comprehensive explanation of tools that the Zamanian lab uses. The user will need to do a good amount of background reading and trialing, but this guide will provide the resources needed in order to gain a thorough and working knowledge of all the tools we use.","title":"How to Use this Guide"},{"location":"#pipeline-organization","text":"We organize our pipelines into 3 tiers, each of which be structued in slightly different ways. Pipelines are categorized into one of the following: Core Pipelines (performed entirely on our BRC server) ImageXpress Mixed Pipelines (performed using a mix of local machines and the server) WormViz Tierpsy Simple Pipelines (performed entirely locally) qPCR EPG Sensory assays","title":"Pipeline Organization"},{"location":"#tools","text":"There are four pieces of software and four languages we will use to accomplish the above goals (each link will take you to our internal documentation for using these tools and languages):","title":"Tools"},{"location":"#software","text":"GitHub ( https://github.com/ ) Homebrew ( https://brew.sh ) Box Sync ( https://box.com ) conda ( https://docs.conda.io/en/latest/ )","title":"Software"},{"location":"#languages","text":"Python R Bash NextFlow","title":"Languages"},{"location":"#usage","text":"This repository is primarily imagined as a first introduction to the Zamanian Lab organization, but it can also be used as a reference for veteran users. New lab members should follow the onboarding guide . Throughout the docs, you will see certain types of code blocks. Code to be run in bash will not include a prompt sequence, for instance: python L3_motility_analysis.py 20180830 Code to be run in Python will include the Python prompt: >>> import numpy as np And code to be run in R will include the R prompt: > install.packages ( 'tidyverse' )","title":"Usage"},{"location":"#updating","text":"This resource is by nature an open, living, and collaborative document. We are using MkDocs as our site generator which uses a simply structured GitHub repository that includes Markdown files as the documentation and a few ancillary files to help in generation. You will need to have your own GitHub account and will need to be a member of the @zamanianlab organization in order to gain editing privileges. To edit this document, please follow the instructions in the Updating page.","title":"Updating"},{"location":"conda/","text":"conda conda <https://conda.io/docs/> _ is used for \"package, dependency and environment managing\" that is cross platform and enables reproducibility of old code, even when some packages and dependencies have been updated in the meantime. conda can be used for any language and can even act as a manager for bioinformatic software such as bwa, bcftools, MrBayes, etc., but we will be using it to manage our Python environments. While most of our plotting and some data analysis uses R, our image and video analyses use Python. There are certain similarities to these languages, and most bioinformatic data analyses can be performed using one or the other (or both). However, R development is more streamlined and centralized, and we only use a few third-party packages, while Python includes two major versions (2 and 3) that are still regularly used (I write in Python 3 while many developers still prefer Python 2, and scripts written in one version often won't work when run with the other version), and the packages that we use are diverse and maintained by a large crowd of different developers. Thus, we don't need package and environment management for R, but our Python pipelines are greatly enhanced with such management. conda has several features that make it a powerful tool, but the main feature we will be using is the ability to create virtual environments and install packages to that specific environment. Normally, when you install a piece of software, it is available to run from any directory on your machine. This is good for some software, but sometimes a developer will encourage you to update the software, which inevitably breaks your code and makes debugging extremely difficult. Virtual environments are one solution to this problem. In these cases, instead of installing software to the entire machine, you install it only in a discrete, contained environment. Below are instructions on installing and setting up conda, and a representative example of how virtual environments work. Installation There are two flavors of conda - Anaconda and Miniconda. Anaconda is 3 GB and contains quite a few packages and features that are unnecessary for our purposes. wget https://repo.continuum.io/miniconda/Miniconda3-3.7.0-Linux-x86_64.sh -O ~/miniconda.sh bash ~/miniconda.sh -b -p $HOME /miniconda These commands will download the miniconda installer, run it, and install it to your $HOME folder. It will also add the path /Users/[user]/software/miniconda3/bin to your lookup $PATH , which allows you to run conda executables without referring explicitly to their location. Usage and an Example Now that conda is installed, let's look at how virtual environments work. First, let's create a new environment that uses Python 3.5: conda create --name test_environment python=3.5 The environment has now been created. You can see a list of all the environments that you have ever created with conda env list . Here is a list of current environments on my machine (the asterisk marks the current environment): zamanian-3108:~ njwheeler$ conda env list # conda environments: # base * /Users/njwheeler/software/miniconda3 motility_analysis /Users/njwheeler/software miniconda3/envs/motility_analysis To activate the test_environment that you just created: source activate test_environment Now you are in the virtual environment, using Python 3.5 as a default. You can check to make sure this is the case with python --version . You can also see the path to your environment's Python with which python . Now that you are in the correct environment, you can begin adjusting it to suit your purposes. The main way to do this is by installing certain Python packages that you may use in your analysis. There are multiple ways to install a Python package, but the two main ways are using conda install {package name} and pip install {package name} . When installing a new package, you should first try to use the conda package manager. If that doesn't work, you will receive an error such as: PackagesNotFoundError: The following packages are not available from current channels If you receive this error, use Google to try to find a way to install the package with conda. You may need to use a different channel such as bioconda , and then use conda install --channel bioconda {package name} . If the package is not available via conda, you will need to use pip install {package name} . As an example, we will use conda to install numpy. Numpy is a popular package used for scientific computing, typically computing that involve matrices. First make sure you are in the correct environment, then run: conda install numpy You should receive a message reporting the successful installation of the package. You can ensure successful installation by running Python with python and then attempting to load the package with >>> import numpy as np . If the package was successfully loaded, you will get no message. If it was unsuccessful, you will see: ModuleNotFoundError : No module named 'numpy' To demonstrate the utility of the conda virtual environment, first deactivate the test_environment with source deactivate test_environment . Then repeat the commands python and >>> import numpy as np . If done correctly, you will see that numpy isn't available outside of the test_environment . This way you can keep your base environment clean from unnecessary packages, and you can make sure the packages within a given environment aren't updated unless you explicitly make it so. Zamanian Lab Environments Whenever we begin a new analysis that will include Python scripts, it is the developer's responsibility to build a conda environment that is suitable for those scripts. Instructions for creating this environment should be included in the README file on the mainpage of the GitHub repo. See my BrugiaMotilityAnalysis repo as an example. Useful Resources conda cheatsheet","title":"conda"},{"location":"conda/#conda","text":"conda <https://conda.io/docs/> _ is used for \"package, dependency and environment managing\" that is cross platform and enables reproducibility of old code, even when some packages and dependencies have been updated in the meantime. conda can be used for any language and can even act as a manager for bioinformatic software such as bwa, bcftools, MrBayes, etc., but we will be using it to manage our Python environments. While most of our plotting and some data analysis uses R, our image and video analyses use Python. There are certain similarities to these languages, and most bioinformatic data analyses can be performed using one or the other (or both). However, R development is more streamlined and centralized, and we only use a few third-party packages, while Python includes two major versions (2 and 3) that are still regularly used (I write in Python 3 while many developers still prefer Python 2, and scripts written in one version often won't work when run with the other version), and the packages that we use are diverse and maintained by a large crowd of different developers. Thus, we don't need package and environment management for R, but our Python pipelines are greatly enhanced with such management. conda has several features that make it a powerful tool, but the main feature we will be using is the ability to create virtual environments and install packages to that specific environment. Normally, when you install a piece of software, it is available to run from any directory on your machine. This is good for some software, but sometimes a developer will encourage you to update the software, which inevitably breaks your code and makes debugging extremely difficult. Virtual environments are one solution to this problem. In these cases, instead of installing software to the entire machine, you install it only in a discrete, contained environment. Below are instructions on installing and setting up conda, and a representative example of how virtual environments work.","title":"conda"},{"location":"conda/#installation","text":"There are two flavors of conda - Anaconda and Miniconda. Anaconda is 3 GB and contains quite a few packages and features that are unnecessary for our purposes. wget https://repo.continuum.io/miniconda/Miniconda3-3.7.0-Linux-x86_64.sh -O ~/miniconda.sh bash ~/miniconda.sh -b -p $HOME /miniconda These commands will download the miniconda installer, run it, and install it to your $HOME folder. It will also add the path /Users/[user]/software/miniconda3/bin to your lookup $PATH , which allows you to run conda executables without referring explicitly to their location.","title":"Installation"},{"location":"conda/#usage-and-an-example","text":"Now that conda is installed, let's look at how virtual environments work. First, let's create a new environment that uses Python 3.5: conda create --name test_environment python=3.5 The environment has now been created. You can see a list of all the environments that you have ever created with conda env list . Here is a list of current environments on my machine (the asterisk marks the current environment): zamanian-3108:~ njwheeler$ conda env list # conda environments: # base * /Users/njwheeler/software/miniconda3 motility_analysis /Users/njwheeler/software miniconda3/envs/motility_analysis To activate the test_environment that you just created: source activate test_environment Now you are in the virtual environment, using Python 3.5 as a default. You can check to make sure this is the case with python --version . You can also see the path to your environment's Python with which python . Now that you are in the correct environment, you can begin adjusting it to suit your purposes. The main way to do this is by installing certain Python packages that you may use in your analysis. There are multiple ways to install a Python package, but the two main ways are using conda install {package name} and pip install {package name} . When installing a new package, you should first try to use the conda package manager. If that doesn't work, you will receive an error such as: PackagesNotFoundError: The following packages are not available from current channels If you receive this error, use Google to try to find a way to install the package with conda. You may need to use a different channel such as bioconda , and then use conda install --channel bioconda {package name} . If the package is not available via conda, you will need to use pip install {package name} . As an example, we will use conda to install numpy. Numpy is a popular package used for scientific computing, typically computing that involve matrices. First make sure you are in the correct environment, then run: conda install numpy You should receive a message reporting the successful installation of the package. You can ensure successful installation by running Python with python and then attempting to load the package with >>> import numpy as np . If the package was successfully loaded, you will get no message. If it was unsuccessful, you will see: ModuleNotFoundError : No module named 'numpy' To demonstrate the utility of the conda virtual environment, first deactivate the test_environment with source deactivate test_environment . Then repeat the commands python and >>> import numpy as np . If done correctly, you will see that numpy isn't available outside of the test_environment . This way you can keep your base environment clean from unnecessary packages, and you can make sure the packages within a given environment aren't updated unless you explicitly make it so.","title":"Usage and an Example"},{"location":"conda/#zamanian-lab-environments","text":"Whenever we begin a new analysis that will include Python scripts, it is the developer's responsibility to build a conda environment that is suitable for those scripts. Instructions for creating this environment should be included in the README file on the mainpage of the GitHub repo. See my BrugiaMotilityAnalysis repo as an example.","title":"Zamanian Lab Environments"},{"location":"conda/#useful-resources","text":"conda cheatsheet","title":"Useful Resources"},{"location":"homebrew/","text":"Homebrew Homebrew is a package manager for macOS. Many of the core software used in bioinformatics and development can be installed using Homebrew, which automatically determines the necessary configuration for successful installation on your machine. Once installed, Homebrew will also keep a log of software that needs updating and will quickly update all of your installed software with only a few keystrokes. Install Homebrew with the following command: /usr/bin/ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" Most of the core software used in the Zamanian Lab can be installed via Homebrew. If you need a piece of software, a good first step is to check if it has been implemented in Homebrew and install it from the source only if absolutely necessary. Below is a list of software that we recommend installing right off that bat. Run the following to automatically install these on your machine: sh ~/Github/ZamanianLabDocs/resources/zl_brew.sh autojump SAMtools blast fastx_toolkit fastqc snpeff vcftools bcftools hmmer igv hisat2 trimmomatic bwa nextflow The following are GNU versions of command line tools that macOS already contains out-of-the-box, but the GNU versions are often faster and will play nicer with software developed in Linux: coreutils binutils diffutils findutils gawk gnu-indent gnu-sed gnu-tar gnu-which gnutls grep gzip watch wdiff wget","title":"Homebrew"},{"location":"homebrew/#homebrew","text":"Homebrew is a package manager for macOS. Many of the core software used in bioinformatics and development can be installed using Homebrew, which automatically determines the necessary configuration for successful installation on your machine. Once installed, Homebrew will also keep a log of software that needs updating and will quickly update all of your installed software with only a few keystrokes. Install Homebrew with the following command: /usr/bin/ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" Most of the core software used in the Zamanian Lab can be installed via Homebrew. If you need a piece of software, a good first step is to check if it has been implemented in Homebrew and install it from the source only if absolutely necessary. Below is a list of software that we recommend installing right off that bat. Run the following to automatically install these on your machine: sh ~/Github/ZamanianLabDocs/resources/zl_brew.sh autojump SAMtools blast fastx_toolkit fastqc snpeff vcftools bcftools hmmer igv hisat2 trimmomatic bwa nextflow The following are GNU versions of command line tools that macOS already contains out-of-the-box, but the GNU versions are often faster and will play nicer with software developed in Linux: coreutils binutils diffutils findutils gawk gnu-indent gnu-sed gnu-tar gnu-which gnutls grep gzip watch wdiff wget","title":"Homebrew"},{"location":"labmanual/","text":"Zamanian Lab Manual v 2.0 I. Lab Mission and Philosophy A. Research Mission Our laboratory studies Neglected Tropical Diseases (NTDs) caused by helminths (parasitic worms). The central ambition of our laboratory is to combine molecular biology, genetics, and computational approaches to improve our understanding of parasite biology and our ability to treat globally important human and animal parasitic infections. This includes discovering new drug targets, elucidating mechanisms of drug resistance, and developing new tools for parasite manipulation. Our work primarily involves the direct study of helminths, including mosquito-borne and soil-transmitted filarial nematode parasites (e.g., Brugia malayi ). To complement these efforts, we also exploit the experimental tractability of the model nematode Caenorhabditis elegans . We will strive to place all of our work in the context of a growing appreciation for and understanding of parasite genetic diversity. B. Philosophy and Mentorship We look to recruit lab members who share our scientific curiosity and who wish to challenge themselves as they grow their scientific independence. We welcome students and trainees from a variety of training backgrounds and with different career ambitions. I take my role as a mentor and advisor very seriously and it is therefore important to me that all members of the lab: (1) remain excited about the science we do, (2) challenge themselves to improve their base of knowledge and technical skills, and (3) engage in meaningful self-reflection about their progress and goals. We will hold weekly lab meetings as a springboard for open and critical scientific exchange. I will also schedule regular individual meetings with every member of the lab so that we can discuss research progress and whatever else that may arise. Career development is a multi-faceted endeavor. Where I am positioned to do so, I will identify or help create opportunities that relate to the career aspirations of individual lab members. I will work with trainees to help them hone their scientific writing and communication skills. This will occur through the drafting of manuscripts, as well as the attendance of relevant conferences that provide opportunities to professionally network. Once lab members have a firm grasp of their primary research projects, I will often encourage them to move out of their comfort zones. For many, this may mean achieving fluency in a programming language (e.g., R or Python) useful to their research and future. Lab members should also seek to make use of the expertise of the broader lab and university community. In general, your resources should include a wide network of peers and mentors. Foster relationships with others in your same position and those that are willing to offer advice. It is critical in science to foster your own support network of people you trust, are inspired by, and that have expertise you don\u2019t yet have. Axioms: Borrowing from Federico Ardila-Mantilla, we build our lab upon these axioms: Axiom 1. Scientific \u201ctalent\u201d is distributed equally among different groups, irrespective of geographic, demographic, and economic boundaries. Axiom 2. Everyone can have joyful, meaningful, and empowering scientific experiences. Axiom 3. Science is a powerful, malleable tool that can be shaped and used differently by various communities to serve their needs. Axiom 4. Every student deserves to be treated with dignity and respect. C. Lab Citizenship My commitment to your success in research and professional growth is coupled to certain expectations. I expect all members of the lab to take ownership of their projects. I expect members of the lab to lend their help and expertise to one another and understand that our laboratory is a team with common scientific goals. I expect everyone to display good lab citizenship. We place value in an open, collaborative, and safe scientific environment. We expect all members of the lab to be good lab citizens and to follow basic lab rules. 1. Do not borrow things without asking 2. Keep your own items to your own bench space 3. Use your own pipettes, tips, and gloves (except where designated) 4. Use only your assigned spaces in fridges and freezers 5. Follow all the rules in this guide for ordering and inventorying items 6. Carry out your lab tasks in a timely manner 7. Be helpful to others - this is a team effort! 8. Clean up after yourselves 9. Always put things back into assigned locations 10. Keep track of items we are low on and place orders in advance 11. Follow all the rules when interacting with other spaces (e.g., the insectary) 12. Stay at least two weeks ahead of parasite orders and plan their use 13. Be here during normal work hours so that you can maximize interactions 14. Make sure the lab is properly shut down (communicate before leaving) Lab dress code: For your safety, wear long pants or skirts and closed toed shoes, and tie back long hair. Do not wear shorts, short skirts, sandals, loose clothing, or dangling jewelry. Throughout your scientific career, you will be professionally interacting with people from diverse backgrounds and with diverse beliefs. In the interests of maintaining an inclusive and welcoming lab environment, I ask that you refrain from wearing articles of clothing that are likely to be perceived as hostile to another person\u2019s heritage, ethnicity, gender, religious beliefs, or sexuality. II. Communication and Calendar A. Slack All members of the lab will be asked to install Slack on their computers and phones and will receive an invitation to join the official lab Slack team zamanian-lab.slack.com . Slack will provide a basis for rapid individual and group communication on all research and lab-related matters. B. Google Calendar An official lab Google calendar will be shared and updated with lab meeting times, relevant departmental events, and one-on-one meeting times. Lab members who will be out of town should notify me in advance and mark those dates on the lab calendar so that other lab members are aware should anything arise. Approved vacation days and other time off should also be entered into the lab calendar. III. Research Documentation A. Physical Lab Notebooks All members of the lab should still record the details of their daily research activities in the form of a traditional lab notebook with dated entries. This is a requirement for federally-funded research. Lab notebooks cannot leave the laboratory and must be turned in at the conclusion of your tenure in the lab. B. Electronic Lab Notebooks The laboratory uses Benchling as a shared electronic lab notebook (ELN) and central repository for all molecular biology efforts. Lab members will receive an invitation to join the ZamanianLab Benchling organization page. Electronic summaries of work done and data generated (gels and printouts) should be regularly annotated and recorded into your defined Benchling lab notebook project space. This means that your electronic notes should include the minimal set of notes required to repeat any molecular biology experiment that you have performed. Do not let too much time elapse before you convert your physical notes into electronic form, as it is easier to clear up ambiguities when experiments are fresh in memory. This should develop into a habit. Benchling also provides tools for the planning of molecular cloning tasks and the design of molecular biology reagents. C. Lab Electronic Storage All grad students and postdocs should install the Box Drive application and receive an invitation to edit the ZamanianLab shared Box folder. All students and staff of the University of Wisconsin-Madison receive unlimited Box cloud storage at no cost through their university e-mail accounts. The shared folder will be used to store lab protocols in a common format and reading materials and resources relating to our research. DO NOT delete shared folders while your local computer is set to sync as this will delete data across all devices. Do not use spaces in file names, unnecessarily long file names, or vague file naming systems that obscure contents. The primary storage folders are described below: /Data/ This folder should be used to neatly preserve original files and raw data output from various lab and campus instruments (e.g., subfolders Gels , Sanger , qPCR , Microscopy , GPCR_assays , RNAi_experiments , and ISH ), as well as minimally processed 'big' data outputs (e.g., subfolders Genomics and RNAseq ). For the former, create a folder with your first name and save files and images using the date (format: YYYYMMDD ) at the beginning of the file name. Other subfolders will be created to represent different project-specific data types where necessary, with strict guidelines for file nomenclature. /LabMembers/ Individual lab folders are provided for members of the lab to store their research-related documents. These individual folders should be used to preserve processed data, protocols in the process of optimization, writing (manuscripts, fellowships, and grants), and any computer programs or scripts written to carry out preliminary analyses. /Protocols/ All major lab protocols and recipes are categorized and contained within this folder, as well as operational protocols relating to the maintenance of lab equipment and use of general services (e.g., shipping). Protocols are divided by species (e.g., C. elegans and Parasites) where appropriate. Within each subfolder, the original protocol files (doc or pages) are contained in a Source sub-subfolder and are exported as PDF files whenever they are updated. D. Lab Meetings Lab meetings will be held once a week. Every member of the lab should have an updated presentation file (dated YYYYMMDD ) in their personal /LabMeetings/ subfolder. This presentation should contain your overall project goals, divided into sub-aims, as well as data and timelines for specific experiments completed and planned for the coming weeks. You should be prepared to present your progress in this short format every week when called upon. This is a space for all members of the lab to contribute to troubleshooting and to engage in constructive and healthy scientific criticism. E. One-on-One Meetings I will hold weekly one-on-meetings with every graduate student and postdoc, except when I'm traveling or have other commitments that I cannot sideline. You should come prepared with organized summaries of the status of your project(s), to share data you\u2019ve produced, and to outline your next set of planned experiments. We will use this time to troubleshoot and constructively dissect these data and plans. This is also an opportunity for us to discuss general issues and your career development goals. IV. Lab Tasks and Organization A. Lab Tasks Every member of the lab will be involved in scheduled lab maintenance in some capacity. This will include things like defined cleaning activities and making common buffers and reagents. Roles are divided between undergraduates and other lab staff and defined in the UndergradTasks.pdf and StaffTasks.pdf documents found in /LabTasks/ . B. Lab inventory The locations of all reagents and consumables will be stored on Quartzy . Lab members will be expected to return ALL items to their assigned locations after use. It is the responsibility of lab members to make sure the Quartzy inventory is up-to-date. Additional rules are outlined in subsequent sections for inventory of plasmids, bacteria, worm strains, and parasite materials. C. General Lab Ordering Lab order requests should be made through Quartzy. Lab orders will be reviewed and placed by the lab manager. It is the responsibility of every member of the lab to communicate when we are nearing the end of necessary supplies or reagents so that orders can be placed in a timely manner. All oligo order requests should be placed through the relevant spreadsheets in the lab /LabOrdering/Oligos/ Box folder. All other consumables and reagent orders should be placed through Quartzy. Except for routine items (e.g., tips, tubes, and gloves), you should message the PI on Slack prior to placing an order on Quartzy to receive approval. Each request should be associated with a funding source in the Quartzy order form. Orders will be fulfilled on designated days of each week. When items arrive, they should be immediately marked as received, physically dated, and immediately associated with a location on Quartzy. D. General Lab Organization Locations Rm 235: consumables storage, 4C plate/media storage, liquid N2 stocks Rm 223: parasite and cell culture, plate pouring, glassware, and cleaning Rm 230: molecular biology main lab Rm 229D: microinjection room Third floor: offices, gel imaging station, insectary Operations: Benches and Pipettes will be assigned to each grad student and postdoc. Undergraduates should only use the spaces and pipettes of their lab mentor. Place dirty glassware in assigned sink locations (Rms 223 and 230). Place empty pipette boxes in assigned sink location (Rm 230). Place worm boxes for baking in assigned location (Rm 223). Empty shipping boxes should be placed on the ground outside the lab. Physical storage: Each graduate student and postdoc will have their own rack spaces in the -80C freezer for personal storage of materials related to individual experiments. Each person is responsible for maintaining proper labeling and notes of their stored items. There are designated storage spaces for lab and commercial plasmids, various bacterials stocks, C. elegans strain stocks, and parasite materials across lab freezers. V. Lab Stocks Locations and descriptions of all lab worm strains, plasmids, bacteria, and oligos should be stored and updated on Quartzy and in defined spreadsheets where specified. The following protocols and naming conventions must be followed, and lab members are responsible for checking the lab database to avoid naming conflicts prior to placing any new orders and assigning new names. Bacteria, worm strains, and plasmids procured from external sources and with existing names should retain those names. A. Oligos Naming: oMZ#### | Storage: Oligo Stocks box (-20C) Use IDT_oligos.xls in /LabOrdering/Oligos/ to enter oligo details for ordering. Check Quartzy to ensure you are using the next oligo number available. Provide complete information (label: Species , Oligo Pairing , Molecular Target , Amplicon Length , and Tm ) before requesting order. All oligo types (DNA primers, gRNAs) should be assigned an ID with the same naming convention. Orders will be placed by a designated lab member. Primers: Make 100 uM lab stocks of each primer oligo and store in Oligo Stocks box (-20C). Add 10*Y (uL) volume to lyophilized primer, where Y is nmol yield to make 100 uM stocks. Keep 10 uM (1:10 of stock) dilutions of primers in your own personal boxes for personal use. Re-order the original stock primer before it runs out. B. Lab Plasmids Naming: pMZ#### | Storage: \"Lab Plasmids\" box (-80C) Lab Plasmids are plasmids created or designed by our lab for long-term use and storage. Place one tube of purified plasmic (label: pMZ#### , Concentration , and Date ) in the Lab Plasmids box (-80C) and another in the Plasmids box (-20C). Update Quartzy with the location of the plasmid and antibiotic resistance information. Use the stock in -20C for all molecular biology purposes. When that stock has been depleted, transfer the backup stock from -80C to -20C, and inoculate liquid media with the frozen bacterial stock to replace the plasmid stock in -80C. All intermediary vectors using for cloning that are unlikely to be used for other purposes should be stored in personal boxes until no longer needed. C. Commercial Plasmids Naming: Original Name | Storage: \"Commercial Plasmids\" box (-80C) Commercial (external) plasmids are plasmids we have received as gifts or ordered from vendors. Place one tube of purified plasmic (label: Original Name , Concentration , and Date ) in the Commercial Plasmids box (-80C) and another in the Commerical Plasmids box (-20C). Update Quartzy with the location of the plasmid, origin of the plasmid (journal or lab citation), URL to the vector sequence if possible, and antibiotic resistance information. Use the stock in -20C for all molecular biology purposes. When that stock has been depleted, transfer the backup stock from -80C to -20C, and inoculate liquid media with the frozen bacterial stock to replace the plasmid stock in -80C. D. Plasmids note All completed (inventoried) plasmid sequences should be deposited into the designated lab plasmid Benchling project. Additionally, plasmid sequences and image maps should be exported to /LabInventory/Plasmid_Export/ . E. Transformed Bacteria Storage: 2 copies (-80C) + 1 copy (liquid N2) \"Lab Plasmid Bacterial Stock\" or \"Commercial Plasmid Bacterial Stock\" Each Lab and Commercial Plasmid should have three bacterial glycerol stocks made (see: PreparationOfBacterialFrozenStocks.pdf in /Protocols/General/ ). Tube label: Plasmid ID , Bacteria (e.g., DH5alpha), and Date (instructions in /Protocols/FreezerLabels/ ). Update Quartzy with the Location, Date frozen, Number of units (tubes), Genotype, and Antibiotic resistance. F. C. elegans Bacterial Stocks Boxes specific to each bacteria (OP50, HB101, NA22) are in the -80C, noted with how many tubes of each bacteria per box in Quartzy. Replace all bacterial stocks before using up the -80C stock. Caenorhabditis elegans Strains A. C. elegans Strain Creation Only the lab manager (Kathy) is allowed to use the microinjection apparatus to create transgenic strains. It will be the responsibility of any person who wishes for a strain to be made to: 1. Coordinate with Kathy at least two weeks in advance 2. Provide necessary background strain for injection (if not N2) 3. Provide injection mixes in the Plasmids box in the top freezer in room 223 - Mark the tube with the date and all plasmids included in the mix - Including any fluorescent or phenotypic marker that should be followed 4. Provide all required information in the inventory spreadsheet (see below) It is your responsibility to monitor injected lines and select for stable lines. You will receive plates from these lines and are responsible for confirming genotypes (through PCR and other approaches) and for strain maintenance. Kathy will use the original plates and chunk and freeze from them only if you decide to keep the strain. Parasite and Insectary Operations Writing and Reference Management Lab Safety We organize our pipelines into 3 tiers, each of which be structued in slightly different ways. Pipelines are categorized into one of the following: Core Pipelines (performed entirely on our BRC server) ImageXpress Mixed Pipelines (performed using a mix of local machines and the server) WormViz Tierpsy Simple Pipelines (performed entirely locally) qPCR EPG Sensory assays Tools There are four pieces of software and four languages we will use to accomplish the above goals (each link will take you to our internal documentation for using these tools and languages): Software GitHub ( https://github.com/ ) Homebrew ( https://brew.sh ) Box Sync ( https://box.com ) conda ( https://docs.conda.io/en/latest/ ) Languages Python R Bash NextFlow Usage This repository is primarily imagined as a first introduction to the Zamanian Lab organization, but it can also be used as a reference for veteran users. New lab members should follow the onboarding guide . Throughout the docs, you will see certain types of code blocks. Code to be run in bash will not include a prompt sequence, for instance: python L3_motility_analysis.py 20180830 Code to be run in Python will include the Python prompt: >>> import numpy as np And code to be run in R will include the R prompt: > install.packages ( 'tidyverse' ) Updating This resource is by nature an open, living, and collaborative document. We are using MkDocs as our site generator which uses a simply structured GitHub repository that includes Markdown files as the documentation and a few ancillary files to help in generation. You will need to have your own GitHub account and will need to be a member of the @zamanianlab organization in order to gain editing privileges. To edit this document, please follow the instructions in the Updating page.","title":"Lab Manual"},{"location":"labmanual/#zamanian-lab-manual-v-20","text":"","title":"Zamanian Lab Manual v 2.0"},{"location":"labmanual/#i-lab-mission-and-philosophy","text":"","title":"I. Lab Mission and Philosophy"},{"location":"labmanual/#a-research-mission","text":"Our laboratory studies Neglected Tropical Diseases (NTDs) caused by helminths (parasitic worms). The central ambition of our laboratory is to combine molecular biology, genetics, and computational approaches to improve our understanding of parasite biology and our ability to treat globally important human and animal parasitic infections. This includes discovering new drug targets, elucidating mechanisms of drug resistance, and developing new tools for parasite manipulation. Our work primarily involves the direct study of helminths, including mosquito-borne and soil-transmitted filarial nematode parasites (e.g., Brugia malayi ). To complement these efforts, we also exploit the experimental tractability of the model nematode Caenorhabditis elegans . We will strive to place all of our work in the context of a growing appreciation for and understanding of parasite genetic diversity.","title":"A. Research Mission"},{"location":"labmanual/#b-philosophy-and-mentorship","text":"We look to recruit lab members who share our scientific curiosity and who wish to challenge themselves as they grow their scientific independence. We welcome students and trainees from a variety of training backgrounds and with different career ambitions. I take my role as a mentor and advisor very seriously and it is therefore important to me that all members of the lab: (1) remain excited about the science we do, (2) challenge themselves to improve their base of knowledge and technical skills, and (3) engage in meaningful self-reflection about their progress and goals. We will hold weekly lab meetings as a springboard for open and critical scientific exchange. I will also schedule regular individual meetings with every member of the lab so that we can discuss research progress and whatever else that may arise. Career development is a multi-faceted endeavor. Where I am positioned to do so, I will identify or help create opportunities that relate to the career aspirations of individual lab members. I will work with trainees to help them hone their scientific writing and communication skills. This will occur through the drafting of manuscripts, as well as the attendance of relevant conferences that provide opportunities to professionally network. Once lab members have a firm grasp of their primary research projects, I will often encourage them to move out of their comfort zones. For many, this may mean achieving fluency in a programming language (e.g., R or Python) useful to their research and future. Lab members should also seek to make use of the expertise of the broader lab and university community. In general, your resources should include a wide network of peers and mentors. Foster relationships with others in your same position and those that are willing to offer advice. It is critical in science to foster your own support network of people you trust, are inspired by, and that have expertise you don\u2019t yet have. Axioms: Borrowing from Federico Ardila-Mantilla, we build our lab upon these axioms: Axiom 1. Scientific \u201ctalent\u201d is distributed equally among different groups, irrespective of geographic, demographic, and economic boundaries. Axiom 2. Everyone can have joyful, meaningful, and empowering scientific experiences. Axiom 3. Science is a powerful, malleable tool that can be shaped and used differently by various communities to serve their needs. Axiom 4. Every student deserves to be treated with dignity and respect.","title":"B. Philosophy and Mentorship"},{"location":"labmanual/#c-lab-citizenship","text":"My commitment to your success in research and professional growth is coupled to certain expectations. I expect all members of the lab to take ownership of their projects. I expect members of the lab to lend their help and expertise to one another and understand that our laboratory is a team with common scientific goals. I expect everyone to display good lab citizenship. We place value in an open, collaborative, and safe scientific environment. We expect all members of the lab to be good lab citizens and to follow basic lab rules. 1. Do not borrow things without asking 2. Keep your own items to your own bench space 3. Use your own pipettes, tips, and gloves (except where designated) 4. Use only your assigned spaces in fridges and freezers 5. Follow all the rules in this guide for ordering and inventorying items 6. Carry out your lab tasks in a timely manner 7. Be helpful to others - this is a team effort! 8. Clean up after yourselves 9. Always put things back into assigned locations 10. Keep track of items we are low on and place orders in advance 11. Follow all the rules when interacting with other spaces (e.g., the insectary) 12. Stay at least two weeks ahead of parasite orders and plan their use 13. Be here during normal work hours so that you can maximize interactions 14. Make sure the lab is properly shut down (communicate before leaving) Lab dress code: For your safety, wear long pants or skirts and closed toed shoes, and tie back long hair. Do not wear shorts, short skirts, sandals, loose clothing, or dangling jewelry. Throughout your scientific career, you will be professionally interacting with people from diverse backgrounds and with diverse beliefs. In the interests of maintaining an inclusive and welcoming lab environment, I ask that you refrain from wearing articles of clothing that are likely to be perceived as hostile to another person\u2019s heritage, ethnicity, gender, religious beliefs, or sexuality.","title":"C. Lab Citizenship"},{"location":"labmanual/#ii-communication-and-calendar","text":"","title":"II. Communication and Calendar"},{"location":"labmanual/#a-slack","text":"All members of the lab will be asked to install Slack on their computers and phones and will receive an invitation to join the official lab Slack team zamanian-lab.slack.com . Slack will provide a basis for rapid individual and group communication on all research and lab-related matters.","title":"A. Slack"},{"location":"labmanual/#b-google-calendar","text":"An official lab Google calendar will be shared and updated with lab meeting times, relevant departmental events, and one-on-one meeting times. Lab members who will be out of town should notify me in advance and mark those dates on the lab calendar so that other lab members are aware should anything arise. Approved vacation days and other time off should also be entered into the lab calendar.","title":"B. Google Calendar"},{"location":"labmanual/#iii-research-documentation","text":"","title":"III. Research Documentation"},{"location":"labmanual/#a-physical-lab-notebooks","text":"All members of the lab should still record the details of their daily research activities in the form of a traditional lab notebook with dated entries. This is a requirement for federally-funded research. Lab notebooks cannot leave the laboratory and must be turned in at the conclusion of your tenure in the lab.","title":"A. Physical Lab Notebooks"},{"location":"labmanual/#b-electronic-lab-notebooks","text":"The laboratory uses Benchling as a shared electronic lab notebook (ELN) and central repository for all molecular biology efforts. Lab members will receive an invitation to join the ZamanianLab Benchling organization page. Electronic summaries of work done and data generated (gels and printouts) should be regularly annotated and recorded into your defined Benchling lab notebook project space. This means that your electronic notes should include the minimal set of notes required to repeat any molecular biology experiment that you have performed. Do not let too much time elapse before you convert your physical notes into electronic form, as it is easier to clear up ambiguities when experiments are fresh in memory. This should develop into a habit. Benchling also provides tools for the planning of molecular cloning tasks and the design of molecular biology reagents.","title":"B. Electronic Lab Notebooks"},{"location":"labmanual/#c-lab-electronic-storage","text":"All grad students and postdocs should install the Box Drive application and receive an invitation to edit the ZamanianLab shared Box folder. All students and staff of the University of Wisconsin-Madison receive unlimited Box cloud storage at no cost through their university e-mail accounts. The shared folder will be used to store lab protocols in a common format and reading materials and resources relating to our research. DO NOT delete shared folders while your local computer is set to sync as this will delete data across all devices. Do not use spaces in file names, unnecessarily long file names, or vague file naming systems that obscure contents. The primary storage folders are described below: /Data/ This folder should be used to neatly preserve original files and raw data output from various lab and campus instruments (e.g., subfolders Gels , Sanger , qPCR , Microscopy , GPCR_assays , RNAi_experiments , and ISH ), as well as minimally processed 'big' data outputs (e.g., subfolders Genomics and RNAseq ). For the former, create a folder with your first name and save files and images using the date (format: YYYYMMDD ) at the beginning of the file name. Other subfolders will be created to represent different project-specific data types where necessary, with strict guidelines for file nomenclature. /LabMembers/ Individual lab folders are provided for members of the lab to store their research-related documents. These individual folders should be used to preserve processed data, protocols in the process of optimization, writing (manuscripts, fellowships, and grants), and any computer programs or scripts written to carry out preliminary analyses. /Protocols/ All major lab protocols and recipes are categorized and contained within this folder, as well as operational protocols relating to the maintenance of lab equipment and use of general services (e.g., shipping). Protocols are divided by species (e.g., C. elegans and Parasites) where appropriate. Within each subfolder, the original protocol files (doc or pages) are contained in a Source sub-subfolder and are exported as PDF files whenever they are updated.","title":"C. Lab Electronic Storage"},{"location":"labmanual/#d-lab-meetings","text":"Lab meetings will be held once a week. Every member of the lab should have an updated presentation file (dated YYYYMMDD ) in their personal /LabMeetings/ subfolder. This presentation should contain your overall project goals, divided into sub-aims, as well as data and timelines for specific experiments completed and planned for the coming weeks. You should be prepared to present your progress in this short format every week when called upon. This is a space for all members of the lab to contribute to troubleshooting and to engage in constructive and healthy scientific criticism.","title":"D. Lab Meetings"},{"location":"labmanual/#e-one-on-one-meetings","text":"I will hold weekly one-on-meetings with every graduate student and postdoc, except when I'm traveling or have other commitments that I cannot sideline. You should come prepared with organized summaries of the status of your project(s), to share data you\u2019ve produced, and to outline your next set of planned experiments. We will use this time to troubleshoot and constructively dissect these data and plans. This is also an opportunity for us to discuss general issues and your career development goals.","title":"E. One-on-One Meetings"},{"location":"labmanual/#iv-lab-tasks-and-organization","text":"","title":"IV. Lab Tasks and Organization"},{"location":"labmanual/#a-lab-tasks","text":"Every member of the lab will be involved in scheduled lab maintenance in some capacity. This will include things like defined cleaning activities and making common buffers and reagents. Roles are divided between undergraduates and other lab staff and defined in the UndergradTasks.pdf and StaffTasks.pdf documents found in /LabTasks/ .","title":"A. Lab Tasks"},{"location":"labmanual/#b-lab-inventory","text":"The locations of all reagents and consumables will be stored on Quartzy . Lab members will be expected to return ALL items to their assigned locations after use. It is the responsibility of lab members to make sure the Quartzy inventory is up-to-date. Additional rules are outlined in subsequent sections for inventory of plasmids, bacteria, worm strains, and parasite materials.","title":"B. Lab inventory"},{"location":"labmanual/#c-general-lab-ordering","text":"Lab order requests should be made through Quartzy. Lab orders will be reviewed and placed by the lab manager. It is the responsibility of every member of the lab to communicate when we are nearing the end of necessary supplies or reagents so that orders can be placed in a timely manner. All oligo order requests should be placed through the relevant spreadsheets in the lab /LabOrdering/Oligos/ Box folder. All other consumables and reagent orders should be placed through Quartzy. Except for routine items (e.g., tips, tubes, and gloves), you should message the PI on Slack prior to placing an order on Quartzy to receive approval. Each request should be associated with a funding source in the Quartzy order form. Orders will be fulfilled on designated days of each week. When items arrive, they should be immediately marked as received, physically dated, and immediately associated with a location on Quartzy.","title":"C. General Lab Ordering"},{"location":"labmanual/#d-general-lab-organization","text":"Locations Rm 235: consumables storage, 4C plate/media storage, liquid N2 stocks Rm 223: parasite and cell culture, plate pouring, glassware, and cleaning Rm 230: molecular biology main lab Rm 229D: microinjection room Third floor: offices, gel imaging station, insectary Operations: Benches and Pipettes will be assigned to each grad student and postdoc. Undergraduates should only use the spaces and pipettes of their lab mentor. Place dirty glassware in assigned sink locations (Rms 223 and 230). Place empty pipette boxes in assigned sink location (Rm 230). Place worm boxes for baking in assigned location (Rm 223). Empty shipping boxes should be placed on the ground outside the lab. Physical storage: Each graduate student and postdoc will have their own rack spaces in the -80C freezer for personal storage of materials related to individual experiments. Each person is responsible for maintaining proper labeling and notes of their stored items. There are designated storage spaces for lab and commercial plasmids, various bacterials stocks, C. elegans strain stocks, and parasite materials across lab freezers.","title":"D. General Lab Organization"},{"location":"labmanual/#v-lab-stocks","text":"Locations and descriptions of all lab worm strains, plasmids, bacteria, and oligos should be stored and updated on Quartzy and in defined spreadsheets where specified. The following protocols and naming conventions must be followed, and lab members are responsible for checking the lab database to avoid naming conflicts prior to placing any new orders and assigning new names. Bacteria, worm strains, and plasmids procured from external sources and with existing names should retain those names.","title":"V. Lab Stocks"},{"location":"labmanual/#a-oligos","text":"Naming: oMZ#### | Storage: Oligo Stocks box (-20C) Use IDT_oligos.xls in /LabOrdering/Oligos/ to enter oligo details for ordering. Check Quartzy to ensure you are using the next oligo number available. Provide complete information (label: Species , Oligo Pairing , Molecular Target , Amplicon Length , and Tm ) before requesting order. All oligo types (DNA primers, gRNAs) should be assigned an ID with the same naming convention. Orders will be placed by a designated lab member. Primers: Make 100 uM lab stocks of each primer oligo and store in Oligo Stocks box (-20C). Add 10*Y (uL) volume to lyophilized primer, where Y is nmol yield to make 100 uM stocks. Keep 10 uM (1:10 of stock) dilutions of primers in your own personal boxes for personal use. Re-order the original stock primer before it runs out.","title":"A. Oligos"},{"location":"labmanual/#b-lab-plasmids","text":"Naming: pMZ#### | Storage: \"Lab Plasmids\" box (-80C) Lab Plasmids are plasmids created or designed by our lab for long-term use and storage. Place one tube of purified plasmic (label: pMZ#### , Concentration , and Date ) in the Lab Plasmids box (-80C) and another in the Plasmids box (-20C). Update Quartzy with the location of the plasmid and antibiotic resistance information. Use the stock in -20C for all molecular biology purposes. When that stock has been depleted, transfer the backup stock from -80C to -20C, and inoculate liquid media with the frozen bacterial stock to replace the plasmid stock in -80C. All intermediary vectors using for cloning that are unlikely to be used for other purposes should be stored in personal boxes until no longer needed.","title":"B. Lab Plasmids"},{"location":"labmanual/#c-commercial-plasmids","text":"Naming: Original Name | Storage: \"Commercial Plasmids\" box (-80C) Commercial (external) plasmids are plasmids we have received as gifts or ordered from vendors. Place one tube of purified plasmic (label: Original Name , Concentration , and Date ) in the Commercial Plasmids box (-80C) and another in the Commerical Plasmids box (-20C). Update Quartzy with the location of the plasmid, origin of the plasmid (journal or lab citation), URL to the vector sequence if possible, and antibiotic resistance information. Use the stock in -20C for all molecular biology purposes. When that stock has been depleted, transfer the backup stock from -80C to -20C, and inoculate liquid media with the frozen bacterial stock to replace the plasmid stock in -80C.","title":"C. Commercial Plasmids"},{"location":"labmanual/#d-plasmids-note","text":"All completed (inventoried) plasmid sequences should be deposited into the designated lab plasmid Benchling project. Additionally, plasmid sequences and image maps should be exported to /LabInventory/Plasmid_Export/ .","title":"D. Plasmids note"},{"location":"labmanual/#e-transformed-bacteria","text":"Storage: 2 copies (-80C) + 1 copy (liquid N2) \"Lab Plasmid Bacterial Stock\" or \"Commercial Plasmid Bacterial Stock\" Each Lab and Commercial Plasmid should have three bacterial glycerol stocks made (see: PreparationOfBacterialFrozenStocks.pdf in /Protocols/General/ ). Tube label: Plasmid ID , Bacteria (e.g., DH5alpha), and Date (instructions in /Protocols/FreezerLabels/ ). Update Quartzy with the Location, Date frozen, Number of units (tubes), Genotype, and Antibiotic resistance.","title":"E. Transformed Bacteria"},{"location":"labmanual/#f-c-elegans-bacterial-stocks","text":"Boxes specific to each bacteria (OP50, HB101, NA22) are in the -80C, noted with how many tubes of each bacteria per box in Quartzy. Replace all bacterial stocks before using up the -80C stock.","title":"F. C. elegans Bacterial Stocks"},{"location":"labmanual/#caenorhabditis-elegans-strains","text":"","title":"Caenorhabditis elegans Strains"},{"location":"labmanual/#a-c-elegans-strain-creation","text":"Only the lab manager (Kathy) is allowed to use the microinjection apparatus to create transgenic strains. It will be the responsibility of any person who wishes for a strain to be made to: 1. Coordinate with Kathy at least two weeks in advance 2. Provide necessary background strain for injection (if not N2) 3. Provide injection mixes in the Plasmids box in the top freezer in room 223 - Mark the tube with the date and all plasmids included in the mix - Including any fluorescent or phenotypic marker that should be followed 4. Provide all required information in the inventory spreadsheet (see below) It is your responsibility to monitor injected lines and select for stable lines. You will receive plates from these lines and are responsible for confirming genotypes (through PCR and other approaches) and for strain maintenance. Kathy will use the original plates and chunk and freeze from them only if you decide to keep the strain.","title":"A. C. elegans Strain Creation"},{"location":"labmanual/#parasite-and-insectary-operations","text":"","title":"Parasite and Insectary Operations"},{"location":"labmanual/#writing-and-reference-management","text":"","title":"Writing and Reference Management"},{"location":"labmanual/#lab-safety","text":"We organize our pipelines into 3 tiers, each of which be structued in slightly different ways. Pipelines are categorized into one of the following: Core Pipelines (performed entirely on our BRC server) ImageXpress Mixed Pipelines (performed using a mix of local machines and the server) WormViz Tierpsy Simple Pipelines (performed entirely locally) qPCR EPG Sensory assays","title":"Lab Safety"},{"location":"labmanual/#tools","text":"There are four pieces of software and four languages we will use to accomplish the above goals (each link will take you to our internal documentation for using these tools and languages):","title":"Tools"},{"location":"labmanual/#software","text":"GitHub ( https://github.com/ ) Homebrew ( https://brew.sh ) Box Sync ( https://box.com ) conda ( https://docs.conda.io/en/latest/ )","title":"Software"},{"location":"labmanual/#languages","text":"Python R Bash NextFlow","title":"Languages"},{"location":"labmanual/#usage","text":"This repository is primarily imagined as a first introduction to the Zamanian Lab organization, but it can also be used as a reference for veteran users. New lab members should follow the onboarding guide . Throughout the docs, you will see certain types of code blocks. Code to be run in bash will not include a prompt sequence, for instance: python L3_motility_analysis.py 20180830 Code to be run in Python will include the Python prompt: >>> import numpy as np And code to be run in R will include the R prompt: > install.packages ( 'tidyverse' )","title":"Usage"},{"location":"labmanual/#updating","text":"This resource is by nature an open, living, and collaborative document. We are using MkDocs as our site generator which uses a simply structured GitHub repository that includes Markdown files as the documentation and a few ancillary files to help in generation. You will need to have your own GitHub account and will need to be a member of the @zamanianlab organization in order to gain editing privileges. To edit this document, please follow the instructions in the Updating page.","title":"Updating"},{"location":"onboarding/","text":"New Member Onboarding If you don't already have one, use your personal email to sign-up for a GitHub account and ask Mostafa to make you a member of the @zamanianlab GitHub organization. Follow the instructions to install core software and libraries via Homebrew . Install other core software: Cyberduck (SFTP client) iTerm (richly featured terminal replacement) Atom (the integrated development environment (IDE) preferred by other lab members) Sourcetree (GUI for managing and interacting with GitHub repos) RStudio (primary IDE for R scripting and plotting) Fiji (primary software used for image analysis) NextFlow (programming language for building complex computational pipelines) Follow instructions for gaining access to our BRC server . If using an Apple machine, replace your ~/.bash_profile with the lab .bash_profile found in the resources directory of the GitHub repo that hosts this site.","title":"Computational"},{"location":"onboarding/#new-member-onboarding","text":"If you don't already have one, use your personal email to sign-up for a GitHub account and ask Mostafa to make you a member of the @zamanianlab GitHub organization. Follow the instructions to install core software and libraries via Homebrew . Install other core software: Cyberduck (SFTP client) iTerm (richly featured terminal replacement) Atom (the integrated development environment (IDE) preferred by other lab members) Sourcetree (GUI for managing and interacting with GitHub repos) RStudio (primary IDE for R scripting and plotting) Fiji (primary software used for image analysis) NextFlow (programming language for building complex computational pipelines) Follow instructions for gaining access to our BRC server . If using an Apple machine, replace your ~/.bash_profile with the lab .bash_profile found in the resources directory of the GitHub repo that hosts this site.","title":"New Member Onboarding"},{"location":"reference/","text":"Index G","title":"Index"},{"location":"reference/#index","text":"","title":"Index"},{"location":"reference/#g","text":"","title":"G"},{"location":"simple/","text":"Simple Pipelines Simple pipelines are those that are entirely local - they run on a local machine and access data on that same machine. The vast majority of these pipelines will consist of 1-3 R scripts with intermediary Rds files. Simple pipelines will not have version control and thus will not use GitHub, but they may often be collaborative. For this reason there are few standard practices that we will employ: Data wrangling will be performed in scripts that are separate from those that perform analysis and visualization. Raw data will be stored in CSV files and wrangled/tidied data will be stored in Rds files. All data will be stored on the shared Box drive using the following directory structure: Box/ZamanianLab/Data/{Experiment Type}/Species/Name/Date Each experiment will have its own CSV file with an accompanying notes.txt file explaining the assay. All lab members will be required to maintain a consistent R environment by installing and periodically updating the Zamanian Lab R Environment package.","title":"Simple Pipelines"},{"location":"simple/#simple-pipelines","text":"Simple pipelines are those that are entirely local - they run on a local machine and access data on that same machine. The vast majority of these pipelines will consist of 1-3 R scripts with intermediary Rds files. Simple pipelines will not have version control and thus will not use GitHub, but they may often be collaborative. For this reason there are few standard practices that we will employ: Data wrangling will be performed in scripts that are separate from those that perform analysis and visualization. Raw data will be stored in CSV files and wrangled/tidied data will be stored in Rds files. All data will be stored on the shared Box drive using the following directory structure: Box/ZamanianLab/Data/{Experiment Type}/Species/Name/Date Each experiment will have its own CSV file with an accompanying notes.txt file explaining the assay. All lab members will be required to maintain a consistent R environment by installing and periodically updating the Zamanian Lab R Environment package.","title":"Simple Pipelines"},{"location":"updating/","text":"Adding New Documentation Install MkDocs pip install mkdocs Clone the ZamanianLabDocs repo: git clone https://github.com/zamanianlab/ZamanianLabDocs.git Create and edit a Markdown file Use previous documentation as a guide Save in /docs/ with the .md extension Push to GitHub Build and deploy site mkdocs build mkdocs gh-deploy Optional: before deplying with gh-deploy , view the site locally with mkdocs serve and copy/paste http://127.0.0.1:8000/ into your browser After deploying, check to ensure everything deployed as expected by visiting http://www.zamanianlab.org/ZamanianLabDocs/","title":"Adding Documentation"},{"location":"updating/#adding-new-documentation","text":"Install MkDocs pip install mkdocs Clone the ZamanianLabDocs repo: git clone https://github.com/zamanianlab/ZamanianLabDocs.git Create and edit a Markdown file Use previous documentation as a guide Save in /docs/ with the .md extension Push to GitHub Build and deploy site mkdocs build mkdocs gh-deploy Optional: before deplying with gh-deploy , view the site locally with mkdocs serve and copy/paste http://127.0.0.1:8000/ into your browser After deploying, check to ensure everything deployed as expected by visiting http://www.zamanianlab.org/ZamanianLabDocs/","title":"Adding New Documentation"}]}